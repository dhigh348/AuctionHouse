# Project: Auction House/Dynamic Programming
## Agent Class
### Description: 
 This is the class that handles the bidding of the agent clients. 
 They are able to make and win bids. The agent is also responsible for providing
  initial account information to the Bank when an agent is created.
   This provides the funds for the user so that they can make bids with their money.
### Methods: 
 public boolean getAccountChange() :
 
    gets if account info has changed.

 public void setAccountChange(boolean accountChange) :
         
    sets the account change.

 public boolean isItemListChange() :
 
    gets if the item list has changed.

 public void setItemListChange() :
    
    sets the item list change info.

 public HashMap<Integer, Integer> getAuctionHouseKeys() :
 
    gets the keys for the integer auction house map.

 public boolean isAuctionHouseChange() :
    
    gets if there has been an auction house change.

 public void setAucHouseChange(boolean aucHouseChange) :
 
    sets the auction house change.

 public int getAccountNumber() :
 
    gets the account number.

 public boolean isBidChange() :
    
    gets if there has been a bid change.

 public void setBidChange(boolean bidChange) :
  
    sets the bid change status.
 
 public boolean isItemsWonChange() :
    
    gets if there has been a winning item.
 
 public void setItemsWonChange(boolean itemsWonChange) :
 
    sets winning item status.
 
 public Item getItem() :
  
    gets an item.
 
 public void setItem(Item item) :
  
    sets an item in the agent. 
 
 public ArrayList<Item> getItemList(AuctionInfo ai) :
  
    gets the item list based on the auction house.

 public ArrayList<Item> getItemList() : 
 
    gets the general item list in the agent.

 public ArrayList<Item> getWonItems() : 
 
    gets the items that the agent has won.

 public AuctionHouseProxy getAHProxy(AuctionInfo info) : 
 
    changes the proxy to send messages to the correct auction house.

 public int getPortNumber() : 
 
    gets the port number of the agent.

 public Double getPendingBalance() : 
 
    gets the pending balance of the agent's account

 public Account getAccount() : 
 
    gets the agent's account.

 public ArrayList<Bid> getBids() : 
 
    gets the current bids that the agent has made.

 public String getHostName() : 
 
    gets the host name of the agent.

 public synchronized boolean setAuctionHouse(AuctionInfo auctionInfo) :
  
    makes a new proxy for the new auction house connection.

 public synchronized ArrayList<AuctionInfo> getHouseList() : 
 
    gets the list of the auction houses.

 public String getNAME() : 
 
    gets the name of the sender, the current class.

 public BankProxy getBank() :
 
    gets the bank proxy.

 public Integer getCurrentAuctionID() :
 
    gets the current auction house id for proxy choosing.

 public int getId() : 
 
    gets the agents id.

 public int setID(int id) : 
 
    sets the id of the agent.

 public Integer getKeyForHouse() : 
 
    gets the integer key for the auction house.

 public boolean setAccount(Account account) : 
 
    sets the agent account to be the one passed in.

 public void setConnected() : 
 
    setting the connection status of the agent.

 public void addMessage(Message message) : 
 
    adding a message to the agents queue for analysis later.

 public void closeApplicationConnection() : 
  
    closing the agents connection.

 @Override public String toString() :
        
    printing out the string representation of the class.

 @Override public void run() :
    
    running certain tasks in the agent.

 public static void main(String[] args) throws IOException :
 
    beginning the program.


## AgentGUI Class 
### Description: 
This class displays the agent information and allows for the agent to interact
with the program. The can create an account, place bids and choose items and 
auction houses.
### Methods: 
public static void launch(String...args) : 

    launching the gui.

@Override public void start(Stage primaryStage) throws Exception : 

    starting the process of showing the gui.

## Bid Class
### Description: 
This class is the container for the information that is contained within a user's
bid. It contains the bidder, the amount and the item being bid on.
### Methods:
public Item getItem() : 

    getting the item from the bid.

public int getBidder() : 

    getting the bidder from the bid.

public double getAmount() : 

    getting the amount bid.

@Override public String toString() : 

    string rep of the class.

## Message Class 
### Description:
This class is the container for the messages being sent to the servers and sockets.
### Methods: 
public ArrayList<Object> getMessageList() :

    getting the list of objects that was passed into the constructor.

@Override public String toString() : 

    string rep of the class.

## MessageAnalyzer Class
 
### Description:
This class is used to get the senders and receivers the type of object that sent
the message. 
### Methods: 
public int analyze(Message message) : 

    analyzing the message passed in to get the sender.

## MessageTypes Enum
 
### Description:
This contains the different message types that are being sent between the 
different servers and sockets in the program. 
### Methods: 
public String getMessage() : 

    getting the message type from the message.

## AuctionHouseProxy Class
 
### Description:
This class provides a proxy between an agent and an auction house. It handles 
messages from the agent and sends them to the auction house. It also handles the
messages from the auction house and sends them to the agent. 
### Methods: 
public void sendMessage(Message inMessage) : 

    placing a message in the auction house proxy queue to send to the auction house server.

@Override public void run() : 

    running specialized tasks to send messages to the agent.

## BankProxy Class
 
### Description:
This class provides a proxy between an agent and a bank. It handles 
messages from the agent and sends them to the bank. It also handles the
messages from the bank and sends them to the agent. 
### Methods: 
public void sendMessage(Message inMessage) : 

    placing a message in the bank proxy queue to send to the auction house server.


public void closeConnections() :

    closing all of the connections in the bank proxy.

@Override public void run() : 
    
    running specialized tasks to send messages to the agent.


# Bank Package

## Bank Class

### Description

It is static and at a known address (IP address and port number)
   * It hosts
      * a list of agent accounts
      * a list of auction house accounts
It shares the list of auction houses with agents having bank accounts
It provides agents with secret keys for use in the bidding process
It transfers funds from agent to auction accounts, under agent control
It blocks and unblocks funds in agent accounts, at the request of action houses
It analyzes messages sent from Auction Houses and Agents and calls methods accordingly

### Methods

public static void main(String[] args) throws Exception : 

    starting point of the bank application
    
public Bank(String address, int portNumber) :

    Constructor for Bank
    
@Override public void run() :

    Thread method that does heavy lifting for bank application
    
public synchronized ArrayList<AgentInfo> getAgentsAsList() :
    
    Gets a list of agents
    
## BankGUI class

### Description

The GUI for the Bank application

### Methods

public BankGUI() :

    Constructor for BankGUI
    
public static void launch(String...args) :

    Launches the bank application and GUI
    
@Override public void start(Stage primaryStage) throws Exception :

    Inherited from Application and used to help start the GUI.
    
@Override public void stop() :

    Stops the program after the GUI is exited

## AuctionInfo class

### Description

    A dummy class that holds auction house information that is pertinent to the bank.

### Methods

public AuctionInfo(String name, String IPAddress, int accountNumber, int portNumber) :
    
    Constructor for AuctionInfo
    
public String getName() :

    Gets the name of the Auction House
    
public void setOpen(boolean bool) :
        
    Sets the isOpen boolean
    
public boolean isOpen() :
    
    Gets the isOpen boolean
    
public int getAccountNumber() :
    
    Gets the accountNumber
    
public int setAccountNumber() :
    
    Sets the accountNumber
    
public int getAuctionID() :

    Gets the auctionID
    
public String getIPAddress() :

    Gets the IP Address of the Auction House
    
public int getPortNumber() :
    
    Gets the port of the Auction House

## AgentInfo class

### Description

    A dummy class that holds agent information that is pertinent to the bank.

### Methods

public AgentInfo(String name, String IPAddress, int accountNumber, int portNumber) :
    
    Constructor for AgentInfo
    
public String getName() :

    Gets the name of the Agent
    
public int getAccountNumber() :
    
    Gets the accountNumber
    
public int setAccountNumber() :
    
    Sets the accountNumber
    
public int getAuctionID() :

    Gets the auctionID
    
public String getIPAddress() :

    Gets the IP Address of the Agent
    
public int getPortNumber() :
    
    Gets the port of the Agent

## Account class

### Description

    Representation of a bank account
    
### Methods

public Account(String name, int accountNumber, double balance, double pendingBalance) :

    Constructor for Account
    
public Account(String name, int accountNumber, double balance, double pendingBalance, boolean isAgent) :

    Constructor for Account
    
public double getBalance() :

    Gets the balance of the account
    
public synchronized void setBalance(double balance) :
    
    Sets the balance of the account
    
public double getPendingBalance() :
        
    Gets the pending balance of an account
        
public synchronized void setPendingBalance(double pendingBalance) :

    Sets the pending balance of an account
    
public Integer getAccountNumber() :

    Gets the account number of an account
    
public synchronized void setAccountNumber(int number) :
    
    Sets the account number of an account
    
public String getName() :
    
    Gets the name of an account
    
public boolean isAgent() :

    Gets the isAgent boolean
    
public void setAgent(boolean agent) :
    
    Sets the isAgent boolean
    
@Override public String toString() :

    Overriddent toString for debugging and display purposes
    


















