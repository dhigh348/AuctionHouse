# Project: Auction House/Dynamic Programming
## Agent Class
### Description: 
 This is the class that handles the bidding of the agent clients. 
 They are able to make and win bids. The agent is also responsible for providing
  initial account information to the Bank when an agent is created.
   This provides the funds for the user so that they can make bids with their money.
### Methods: 
 public boolean getAccountChange() 

 public void setAccountChange(boolean accountChange)

 public boolean isItemListChange()

 public void setItemListChange()

 public HashMap<Integer, Integer> getAuctionHouseKeys()

 public boolean isAuctionHouseChange()

 public void setAucHouseChange(boolean aucHouseChange)

 public int getAccountNumber()

 public boolean isBidChange()

 public void setBidChange(boolean bidChange)
 
 public boolean isItemsWonChange()
 
 public void setItemsWonChange(boolean itemsWonChange)
 
 public Item getItem()
 
 public void setItem(Item item) 
 
 public ArrayList<Item> getItemList(AuctionInfo ai)

 public ArrayList<Item> getItemList()

 public ArrayList<Item> getWonItems()

 public AuctionHouseProxy getAHProxy(AuctionInfo info)

 public int getPortNumber()

 public Double getPendingBalance()

 public Account getAccount()

 public ArrayList<Bid> getBids()

 public String getHostName()

 public synchronized boolean setAuctionHouse(AuctionInfo auctionInfo)

 public synchronized ArrayList<AuctionInfo> getHouseList()

 public String getNAME()

 public BankProxy getBank()

 public Integer getCurrentAuctionID()

 public int getId()

 public int setID(int id)

 public Integer getKeyForHouse()

 public boolean setAccount(Account account)

 public void setConnected()

 public void addMessage(Message message)

 public void closeApplicationConnection()

 @Override public String toString()

 @Override public void run() 

 public static void main(String[] args) throws IOException


## AgentGUI Class 
### Description: 
This class displays the agent information and allows for the agent to interact
with the program. The can create an account, place bids and choose items and 
auction houses.
### Methods: 
public static void launch(String...args)

@Override public void start(Stage primaryStage) throws Exception

## Bid Class
### Description: 
This class is the container for the information that is contained within a user's
bid. It contains the bidder, the amount and the item being bid on.
### Methods:
public Item getItem()

public int getBidder()

public double getAmount()

@Override public String toString() 

## Message Class 
### Description:
This class is the container for the messages being sent to the servers and sockets.
### Methods: 
public ArrayList<Object> getMessageList()

@Override public String toString()

## MessageAnalyzer Class
 
### Description:
This class is used to get the senders and receivers the type of object that sent
the message. 
### Methods: 
public int analyze(Message message)

## MessageTypes Enum
 
### Description:
This contains the different message types that are being sent between the 
different servers and sockets in the program. 
### Methods: 
public String getMessage()

## AuctionHouseProxy Class
 
### Description:
This class provides a proxy between an agent and an auction house. It handles 
messages from the agent and sends them to the auction house. It also handles the
messages from the auction house and sends them to the agent. 
### Methods: 
public void sendMessage(Message inMessage)

@Override public void run()

## BankProxy Class
 
### Description:
This class provides a proxy between an agent and a bank. It handles 
messages from the agent and sends them to the bank. It also handles the
messages from the bank and sends them to the agent. 
### Methods: 
public void sendMessage(Message inMessage)

public void closeConnections()

@Override public void run()











